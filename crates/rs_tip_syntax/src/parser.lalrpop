use crate::ast::*;
use crate::lexer;

grammar;

#[inline]
Spanned<T>: Spanned<T> = <l:@L> <t:T> <r:@R> => t.into_spanned(l, r);

Comma<T>: Vec<T> = <mut v:(<T> ",")*> <e:T?> => match e {
    Some(e) => {
        v.push(e);
        v
    }
    None => v,
};

pub(crate) Prog: AstProg = Spanned<Prog_>;
Prog_: Prog = Fun* => Prog { funs: <> };

Fun: AstFun = Spanned<Fun_>;
Fun_: Fun = <name:Spanned<"IDENTIFIER">> "(" <params:Comma<Spanned<"IDENTIFIER">>> ")" "{" <vars:("var" <Comma<Spanned<"IDENTIFIER">>> ";")?> <stms:Stm+> "return" <return_:Exp> ";" "}" => Fun { 
    name,
    params,
    vars: vars.unwrap_or_else(|| Vec::new()),
    stms,
    return_: Spanned {
        start: 0,
        end: 0,
        node: Exp::Null,
    }
};

Stm: AstStm = Spanned<Stm_>;
Stm_: Stm = {
    <id:Spanned<"IDENTIFIER">> "=" <exp:Exp> ";" => Stm::IdentifierAssign(id, exp),
    "output" <exp:Exp> ";" => Stm::Output(exp),
    "if" "(" <cond:Exp> ")" "{" <then:Stm+> "}" <else_:("else" "{" <Stm+> "}")?> => Stm::If(cond, then, else_),
    "while" "(" <cond:Exp> ")" "{" <body:Stm+> "}" => Stm::While(cond, body),
}

Exp: AstExp = CompTest;

CompTest: AstExp = {
    <l:@L> <lhs:CompTest> "==" <rhs:ArithExp> <r:@R> => Exp::Binary(Box::new(lhs), BinOp::Equal, Box::new(rhs)).into_spanned(l, r),
    <l:@L> <lhs:CompTest> ">" <rhs:ArithExp> <r:@R> => Exp::Binary(Box::new(lhs), BinOp::Greater, Box::new(rhs)).into_spanned(l, r),
    ArithExp,
}

ArithExp: AstExp = {
    <l:@L> <lhs:ArithExp> "+" <rhs:FactorExp> <r:@R> => Exp::Binary(Box::new(lhs), BinOp::Add, Box::new(rhs)).into_spanned(l, r),
    <l:@L> <lhs:ArithExp> "-" <rhs:FactorExp> <r:@R> => Exp::Binary(Box::new(lhs), BinOp::Subtract, Box::new(rhs)).into_spanned(l, r),
    FactorExp,
}

FactorExp: AstExp = {
    <l:@L> <lhs:FactorExp> "*" <rhs:TermExp> <r:@R> => Exp::Binary(Box::new(lhs), BinOp::Multiply, Box::new(rhs)).into_spanned(l, r),
    <l:@L> <lhs:FactorExp> "/" <rhs:TermExp> <r:@R> => Exp::Binary(Box::new(lhs), BinOp::Divide, Box::new(rhs)).into_spanned(l, r),
    TermExp,
}

TermExp: AstExp = {
    <l:@L> "-" <exp:CallExp> <r:@R> => Exp::Unary(UnOp::Negative, Box::new(exp)).into_spanned(l, r),
    <l:@L> "alloc" <exp:CallExp> <r:@R> => Exp::Alloc(Box::new(exp)).into_spanned(l, r),
    <l:@L> "*" <exp:CallExp> <r:@R> => Exp::Dereference(Box::new(exp)).into_spanned(l, r),
    CallExp,
}
    
CallExp: AstExp = {
    <l:@L> <f:PrimaryExp> "(" <args:Exp*> ")" <r:@R> => Exp::Call(Box::new(f), args).into_spanned(l, r),
    <l:@L> <f:CallExp> "." <ident:Spanned<"IDENTIFIER">> => Exp::Field(Box::new(f), ident).into_spanned(l, r),
    PrimaryExp,
}

PrimaryExp: AstExp = {
    <l:@L> <int:Spanned<"INT">> <r:@R> => Exp::Int(int).into_spanned(l, r),
    <l:@L> <ident:Spanned<"IDENTIFIER">> <r:@R> => Exp::Identifier(ident).into_spanned(l, r),
    <l:@L> "&" <ident:Spanned<"IDENTIFIER">> <r:@R> => Exp::Pointer(ident).into_spanned(l, r),
    <l:@L> "null" <r:@R> => Exp::Null.into_spanned(l, r),
}

extern {
    type Location = usize;
    type Error = anyhow::Error;

    enum lexer::Token {
        "INT" => lexer::Token::Int(<i32>),
        "IDENTIFIER" => lexer::Token::Identifier(<String>),

        "input" => lexer::Token::Input,
        "output" => lexer::Token::Output,
        "if" => lexer::Token::If,
        "else" => lexer::Token::Else,
        "while" => lexer::Token::While,
        "return" => lexer::Token::Return,
        "var" => lexer::Token::Var,
        "alloc" => lexer::Token::Alloc,
        "null" => lexer::Token::Null,

        "," => lexer::Token::Comma,
        "." => lexer::Token::Dot,
        ":" => lexer::Token::Colon,
        ";" => lexer::Token::Semicolon,
        "&" => lexer::Token::Ampersand,
        "+" => lexer::Token::Plus,
        "-" => lexer::Token::Minus,
        "*" => lexer::Token::Star,
        "/" => lexer::Token::Slash,
        ">" => lexer::Token::Greater,
        "=" => lexer::Token::Equal,
        "==" => lexer::Token::EqualEqual,
        "(" => lexer::Token::OpeningRound,
        "{" => lexer::Token::OpeningCurly,
        ")" => lexer::Token::ClosingRound,
        "}" => lexer::Token::ClosingCurly,
    }
}